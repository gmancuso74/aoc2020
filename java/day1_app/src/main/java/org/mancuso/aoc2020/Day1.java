/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.mancuso.aoc2020;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class Day1 extends AbstractDay {

    public String name() {return "Day1";}

    public List<Integer> load(String string) throws IOException {

        Path path = Paths.get(string);
        try (BufferedReader br = Files.newBufferedReader(path)) {
            return br.lines().map(Integer::parseInt).collect(Collectors.toList());
        }
    }

    int sum(NTuple<Integer> tuple) {
        int result = 0;
        for (int i = 0; i < tuple.getSize(); i++) {
            result = result + tuple.get(i);
        }
        return result;
    }

    int mult(NTuple<Integer> tuple) {
        int result = 1;
        for (int i = 0; i < tuple.getSize(); i++) {
            result = result * tuple.get(i);
        }
        return result;

    }

    public NTuple<Integer> find(int r, int target, List<Integer> data) {
        CombinationBuilder<Integer> cb = new CombinationBuilder<>();
        Optional<NTuple<Integer>> match = cb.getCombinations(data, r).parallelStream().filter(x -> sum(x) == target)
                .findFirst();
        return match.orElse(null);
    }

    public String part1() {
        try {
            List<Integer> input = load("day1_app/input");
            var match = find(2, 2020, input);
            return String.valueOf(mult(match));
        } catch(Exception ex) {
            System.out.println("Using " + Paths.get("day1_app/input").toAbsolutePath());
            ex.printStackTrace();
            return null;
        }
    }

    public String part2() {
        try {
            List<Integer> input = load("day1_app/input");
            var match = find(3, 2020, input);
            return String.valueOf(mult(match));
        } catch(Exception ex){
            System.out.println("Using " + Paths.get("day1_app/input").toAbsolutePath());
            ex.printStackTrace();
            return null;
        }
    }
}
