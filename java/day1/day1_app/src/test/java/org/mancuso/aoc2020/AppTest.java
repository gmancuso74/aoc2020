/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.mancuso.aoc2020;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

public class AppTest {

	@Test
	public void testSmall() throws IOException {
		App app = new App();
		List<Integer> data = app.load("small");
		assertArrayEquals(new Integer[] { 1721, 979, 366, 299, 675, 1456 }, data.toArray(new Integer[] {}));
		NTuple<Integer> result = app.find(2, 2020, data);
		assertNotNull(result);
		assertEquals(2, result.getSize());
		assertNotNull("left side is null", result.get(0));
		assertNotNull("right side is null", result.get(1));
		assertEquals(Integer.valueOf(1721), result.get(0));
		assertEquals(Integer.valueOf(299), result.get(1));
		
	}

	private BigInteger fact(int n) {
		BigInteger start = BigInteger.ONE;
		for (int i = n; i > 0; i--) {
			start = start.multiply(BigInteger.valueOf(i));
		}
		return start;
	}

	private int comboCount(int n, int r) {
		// n! / ((r!)*(n-r)!)
		return fact(n).divide((fact(r).multiply(fact(n-r)))).intValueExact();
	}

	@Test
	public void testFactorial() {
		assertEquals(1, fact(1).intValueExact());
		assertEquals(2, fact(2).intValueExact());
		assertEquals(6, fact(3).intValueExact());
		assertEquals(24, fact(4).intValueExact());
		assertEquals(120, fact(5).intValueExact());
		assertEquals(720, fact(6).intValueExact());
		assertEquals(3628800, fact(10).intValueExact());

	}
	
	@Test
	public void testComboCount() {
		assertEquals(1,comboCount(2,2));
		assertEquals(10,comboCount(5,2));
		assertEquals(10,comboCount(5,3));
		assertEquals(105,comboCount(15,2));
		assertEquals(455,comboCount(15,3));
	}

	@Test
	public void testCombination() {
		CombinationBuilder<Integer> cb = new CombinationBuilder<Integer>();
		List<Integer> input = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5, });
		List<NTuple<Integer>> result = cb.getCombinations(input, 2);
		assertEquals(comboCount(5, 2), result.size());
		result = cb.getCombinations(input, 3);
		assertEquals(comboCount(5, 3), result.size());
	}
}
